---
- name: Configure Master Node
  hosts: master
  become: yes

  vars_files:
    - namespaces.yaml

  roles:
    - digitalocean_agent
    - swap
    - common
    - microk8s
    - k8s_namespaces
    - secrets

  tasks:
    - name: Install DigitalOcean Agent if not running
      shell: |
        if ! systemctl is-active --quiet do-agent; then
          curl -sSL https://repos.insights.digitalocean.com/install.sh | bash
        fi
      args:
        executable: /bin/bash

    - name: Create Kubernetes namespaces
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ item }}"
      loop: "{{ namespaces }}"
      environment:
        KUBECONFIG: "/var/snap/microk8s/current/credentials/client.config"
        PATH: "/snap/bin:{{ ansible_env.PATH }}"

    - name: Process and apply Kubernetes manifests
      block:
        - name: Create temporary directory for processed manifests
          tempfile:
            state: directory
            prefix: processed_manifests_
          register: temp_manifest_dir
          delegate_to: localhost
          become: no

        - name: Copy manifests to temporary directory
          copy:
            src: deployments/
            dest: "{{ temp_manifest_dir.path }}/"
            mode: '0644'
          delegate_to: localhost
          become: no

        - name: Replace domain in manifests
          replace:
            path: "{{ item }}"
            regexp: 'lab\.kratochvil\.cloud'
            replace: "{{ domain_name }}"
          loop: "{{ lookup('fileglob', temp_manifest_dir.path + '/*.yaml', wantlist=True) }}"
          loop_control:
            label: "{{ item | basename }}"
          delegate_to: localhost
          become: no

        - name: Copy processed manifests to the server
          copy:
            src: "{{ temp_manifest_dir.path }}/"
            dest: /tmp/deployments/
            mode: '0644'

        - name: Apply Kubernetes manifests
          shell: microk8s kubectl apply -f /tmp/deployments/
          args:
            executable: /bin/bash
          environment:
            PATH: "/snap/bin:{{ ansible_env.PATH }}"

        - name: Remove temporary directory
          file:
            path: "{{ temp_manifest_dir.path }}"
            state: absent
          delegate_to: localhost
          become: no

    - name: Generate MicroK8s join token
      shell: microk8s add-node --token-ttl 3600
      register: join_command_output
      environment:
        PATH: "/snap/bin:{{ ansible_env.PATH }}"

    - name: Extract join command
      set_fact:
        join_command: "{{ join_command_output.stdout_lines[-1] }}"

    - name: Save join command to file
      copy:
        content: "{{ join_command }}"
        dest: /tmp/join_command.txt

    - name: Fetch join command to control machine
      fetch:
        src: /tmp/join_command.txt
        dest: /tmp/join_command.txt
        flat: yes

- name: Configure Worker Nodes
  hosts: workers
  become: yes

  roles:
    - common
    - microk8s

  tasks:
    - name: Read join command from control machine
      delegate_to: localhost
      slurp:
        src: /tmp/join_command.txt
      register: join_command_file
      become: no

    - name: Decode join command
      set_fact:
        join_command_decoded: "{{ join_command_file.content | b64decode }}"

    - name: Check if the node is already part of the cluster
      shell: |
        microk8s kubectl get nodes --no-headers -o custom-columns=:.metadata.name | grep -w `hostname`
      register: node_status
      failed_when: false
      changed_when: false
      environment:
        PATH: "/snap/bin:{{ ansible_env.PATH }}"

    - name: Join the MicroK8s cluster
      shell: "{{ join_command_decoded }}"
      args:
        executable: /bin/bash
      when: node_status.rc != 0  # Only run if the node is not already part of the cluster
      environment:
        PATH: "/snap/bin:{{ ansible_env.PATH }}"

- name: Clean up join command on control machine
  hosts: localhost
  tasks:
    - name: Remove join command file
      file:
        path: /tmp/join_command.txt
        state: absent
